name: Release Pipeline

on:
  push:
    tags: ['v*.*.*']

permissions:
  contents: write
  packages: write

env:
  VERSION: ${{ github.ref_name }}

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm
          cmake --version

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --formula cmake
          cmake --version

      # Установка WiX и CMake для Windows
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install wixtoolset cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y --no-progress
          refreshenv
          cmake --version
          heat.exe -?

      # Подготовка файлов для Windows
      - name: Prepare Windows assets
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # Создаем минимальные необходимые файлы
          mkdir -p assets
          if [ ! -f LICENSE.rtf ]; then
            echo "{\\rtf1\\ansi\\ansicpg1251\\deff0\\deflang1049{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}" > LICENSE.rtf
            echo "{\\colortbl ;\\red0\\green0\\blue0;}" >> LICENSE.rtf
            echo "\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang1033\\f0\\fs22\\cf1 Sample License Text\\par }" >> LICENSE.rtf
          fi
          if [ ! -f assets/icon.ico ]; then
            convert -size 256x256 xc:black assets/icon.ico || echo "Placeholder icon created"
          fi

      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DVERSION=${{ env.VERSION }}
          cmake --build . --config Release --parallel 2

      # Создание исходников
      - name: Create source packages
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ env.VERSION }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ env.VERSION }}-src.zip HEAD

      # Создание пакетов
      - name: Create packages
        shell: bash
        run: |
          cd build
          if [ "$RUNNER_OS" = "Linux" ]; then
            cpack -G DEB && cpack -G RPM
          elif [ "$RUNNER_OS" = "macOS" ]; then
            cpack -G DragNDrop || cpack -G ZIP
          elif [ "$RUNNER_OS" = "Windows" ]; then
            cpack -G WIX
            if [ ! -f *.msi ]; then
              echo "MSI creation failed, falling back to ZIP"
              cpack -G ZIP
            fi
          fi
          mkdir -p ../artifacts/packages
          cp *.deb *.rpm *.dmg *.msi *.zip ../artifacts/packages/ 2>/dev/null || :

      # Копирование бинарных файлов
      - name: Copy binaries
        shell: bash
        run: |
          mkdir -p artifacts/binaries
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ \;
              ;;
            Windows)
              find build -name "solver.exe" -type f -exec cp {} artifacts/binaries/ \;
              ;;
          esac

      # Проверка артефактов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts:"
          ls -lhR artifacts/
          [ -z "$(ls -A artifacts/)" ] && echo "No artifacts!" && exit 1

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: artifacts/*
          retention-days: 7

      # Создание релиза
      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          name: Solver ${{ env.VERSION }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
