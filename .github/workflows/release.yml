name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей с оптимизацией для каждой ОС
      - name: Install dependencies
        shell: bash
        run: |
          case "$RUNNER_OS" in
            Linux)
              sudo apt-get update -qq
              sudo apt-get install -y --no-install-recommends cmake build-essential zip rpm
              ;;
            macOS)
              brew update --quiet
              brew install cmake || brew upgrade cmake
              ;;
            Windows)
              # Альтернативная установка CMake через winget (быстрее и надежнее)
              winget install --id Kitware.CMake --silent --accept-package-agreements --accept-source-agreements
              # WiX через Chocolatey с таймаутом
              choco install wixtoolset -y --no-progress --timeout 900 --ignore-detected-reboot
              refreshenv
              ;;
          esac
          cmake --version

      # Подготовка Windows-specific файлов
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: bash
        timeout-minutes: 5
        run: |
          mkdir -p assets
          if [ ! -f LICENSE.rtf ]; then
            echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > LICENSE.rtf
          fi
          if [ ! -f assets/icon.ico ]; then
            convert -size 64x64 xc:white assets/icon.ico || echo "Placeholder" > assets/icon.ico
          fi

      # Сборка проекта с оптимизацией для Windows
      - name: Configure and Build
        shell: bash
        timeout-minutes: 20
        run: |
          mkdir -p build
          cd build
          if [ "$RUNNER_OS" = "Windows" ]; then
            # Оптимизированные настройки для Windows
            cmake .. -DCMAKE_BUILD_TYPE=Release \
                     -DCMAKE_VERBOSE_MAKEFILE=OFF \
                     -DBUILD_TESTING=OFF \
                     -DCMAKE_SKIP_RPATH=ON
            cmake --build . --config Release -- /m:2 /p:CL_MPCount=2 /v:minimal
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release --parallel 2
          fi

      # Создание исходников (только для тегов)
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        timeout-minutes: 5
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o "artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz" HEAD
          git archive --format=zip -o "artifacts/source/Solver-${{ github.ref_name }}-src.zip" HEAD

      # Создание пакетов с улучшенной обработкой ошибок
      - name: Create packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        timeout-minutes: 10
        run: |
          cd build
          case "$RUNNER_OS" in
            Linux)
              cpack -G DEB || echo "DEB package creation failed"
              cpack -G RPM || echo "RPM package creation failed"
              ;;
            macOS)
              cpack -G DragNDrop || cpack -G ZIP || echo "Package creation failed"
              ;;
            Windows)
              if command -v light.exe >/dev/null 2>&1; then
                cpack -G WIX || cpack -G ZIP || echo "MSI creation failed, falling back to ZIP"
              else
                cpack -G ZIP
                echo "WiX not found, created ZIP package instead"
              fi
              ;;
          esac
          mkdir -p ../artifacts/packages
          cp *.deb *.rpm *.dmg *.msi *.zip ../artifacts/packages/ 2>/dev/null || :

      # Копирование бинарных файлов
      - name: Copy binaries
        shell: bash
        timeout-minutes: 5
        run: |
          mkdir -p artifacts/binaries
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ \;
              ;;
            Windows)
              find build -name "solver.exe" -type f -exec cp {} artifacts/binaries/ \;
              ;;
          esac

      # Проверка результатов с четкой диагностикой
      - name: Verify artifacts
        shell: bash
        run: |
          echo "=== Artifacts structure ==="
          find artifacts/ -type f -exec ls -lh {} \;

          if [ ! -d "artifacts" ] || [ -z "$(ls -A artifacts/)" ]; then
            echo "::error::No artifacts were generated!"
            exit 1
          fi

          echo "=== Package contents ==="
          case "$RUNNER_OS" in
            Linux)   ls -lh artifacts/packages/*.deb artifacts/packages/*.rpm 2>/dev/null || : ;;
            macOS)   ls -lh artifacts/packages/*.dmg artifacts/packages/*.zip 2>/dev/null || : ;;
            Windows) ls -lh artifacts/packages/*.msi artifacts/packages/*.zip 2>/dev/null || : ;;
          esac

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: artifacts/
          retention-days: 7

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
