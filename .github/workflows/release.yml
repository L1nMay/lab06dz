name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm uuid-runtime
          cmake --version

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --formula cmake create-dmg
          cmake --version

      # Установка WiX Toolset и зависимостей для Windows
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco uninstall wixtoolset -y
          choco install wixtoolset -y --version 3.11.2 --no-progress
          choco install cmake -y --no-progress
          choco install imagemagick -y --no-progress
          choco install nuget.commandline -y --no-progress
          $wixPath = "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin"
          echo "WIX_PATH=$wixPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          refreshenv
          cmake --version
          magick --version

      # Проверка установки WiX
      - name: Verify WiX installation
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "Проверка инструментов WiX:"
          heat.exe -?
          candle.exe -?
          light.exe -?
          Write-Host "Инструменты WiX доступны"

      # Проверка содержимого директории (только для Windows)
      - name: List directory contents (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "Содержимое директории перед сборкой:"
          Get-ChildItem -Recurse | Format-Table -AutoSize

      # Подготовка Windows-специфичных файлов
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p assets/windows
          echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > LICENSE.rtf
          magick -size 256x256 xc:black -fill white -draw "circle 128,128 128,1" assets/windows/icon.ico || echo "Placeholder icon" > assets/windows/icon.ico
          magick -size 493x58 xc:gray -fill blue -draw "rectangle 10,10 483,48" assets/windows/banner.bmp
          magick -size 493x312 xc:gray -fill blue -draw "rectangle 10,10 483,302" assets/windows/dialog.bmp
          cat << 'EOF' > WixTemplate.wxs
          <?xml version="1.0" encoding="UTF-8"?>
          <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
              <Product Id="*" Name="$(var.ProductName)" Language="1033" Version="$(var.ProductVersion)" Manufacturer="$(var.ProductManufacturer)" UpgradeCode="$(var.UpgradeCode)">
                  <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />
                  <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />
                  <MediaTemplate EmbedCab="yes" />
                  <Feature Id="ProductFeature" Title="$(var.ProductName)" Level="1">
                      <ComponentGroupRef Id="ProductComponents" />
                  </Feature>
              </Product>
              <Fragment>
                  <Directory Id="TARGETDIR" Name="SourceDir">
                      <Directory Id="ProgramFilesFolder">
                          <Directory Id="INSTALLFOLDER" Name="$(var.ProductName)" />
                      </Directory>
                  </Directory>
              </Fragment>
              <Fragment>
                  <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
                      <!-- Files will be added automatically by CPack -->
                  </ComponentGroup>
              </Fragment>
          </Wix>
          EOF

      # Конфигурация и сборка (Windows)
      - name: Configure and Build (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Создаем директории
          mkdir -p build
          cd build

          # Генерируем уникальные GUID
          $UPGRADE_GUID = [guid]::NewGuid().ToString()
          $PRODUCT_GUID = [guid]::NewGuid().ToString()

          # Конфигурация CMake
          Write-Host "Starting CMake configuration..."
          cmake .. --debug-output --trace-expand `
            -DCMAKE_BUILD_TYPE=Release `
            -DCPACK_GENERATOR="WIX" `
            -DCPACK_WIX_UPGRADE_GUID="$UPGRADE_GUID" `
            -DCPACK_WIX_PRODUCT_GUID="$PRODUCT_GUID" `
            -DCPACK_WIX_LICENSE_RTF="../LICENSE.rtf" `
            -DCPACK_WIX_PRODUCT_ICON="../assets/windows/icon.ico" `
            -DCPACK_WIX_UI_REF="WixUI_Minimal" `
            -DCPACK_WIX_CULTURES="en-US" `
            -DCPACK_WIX_TEMPLATE="../WixTemplate.wxs" `
            -DCPACK_WIX_EXTENSIONS="WixUtilExtension" `
            -DCPACK_PACKAGE_NAME="Solver" `
            -DCPACK_PACKAGE_VENDOR="Your Company" `
            -DCPACK_PACKAGE_VERSION="${{ github.ref_name }}" `
            -DCPACK_PACKAGE_DESCRIPTION_SUMMARY="Solver Application" `
            -DCPACK_RESOURCE_FILE_LICENSE="../LICENSE.rtf" `
            -DCPACK_PACKAGE_INSTALL_DIRECTORY="Solver" `
            -DCPACK_WIX_PROPERTY_ARPCONTACT="contact@example.com" `
            -DCPACK_WIX_PRODUCT_ICON="../assets/windows/icon.ico" `
            -DCPACK_WIX_UI_BANNER="../assets/windows/banner.bmp" `
            -DCPACK_WIX_UI_DIALOG="../assets/windows/dialog.bmp" | Out-File -FilePath "cmake.log" -Encoding utf8

          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error] CMake configuration failed"
              Write-Host "Last 50 lines of CMake output:"
              Get-Content "cmake.log" -Tail 50
              exit $LASTEXITCODE
          }
          Write-Host "CMake configuration completed successfully"

      - name: Build project (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd build
          Write-Host "Starting build process..."
          cmake --build . --config Release --parallel 2 | Out-File -FilePath "build.log" -Encoding utf8 -Append

          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error] Build failed"
              Write-Host "Last 50 lines of build output:"
              Get-Content "build.log" -Tail 50
              exit $LASTEXITCODE
          }
          Write-Host "Build completed successfully"

      - name: Create MSI package (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd build
          Write-Host "Starting CPack..."
          cpack -G WIX -V -C Release --debug | Out-File -FilePath "cpack.log" -Encoding utf8 -Append

          mkdir -p ../artifacts/packages
          $msiFiles = Get-ChildItem -Path "*.msi" -ErrorAction SilentlyContinue

          if (-not $msiFiles) {
              Write-Host "##[error] No MSI files found!"
              Write-Host "Last 50 lines of CPack output:"
              Get-Content "cpack.log" -Tail 50
              exit 1
          }

          Copy-Item -Path $msiFiles -Destination "../artifacts/packages/" -Force
          Write-Host "Successfully created and copied MSI packages:"
          $msiFiles | Format-Table -AutoSize

      # Конфигурация и сборка (Linux/macOS)
      - name: Configure and Build (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel 2

      # Создание исходников
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ github.ref_name }}-src.zip HEAD

      # Создание пакетов (Linux/macOS)
      - name: Create packages (Linux/macOS)
        if: startsWith(github.ref, 'refs/tags/') && runner.os != 'Windows'
        shell: bash
        run: |
          cd build
          mkdir -p ../artifacts/packages
          if [ "$RUNNER_OS" = "Linux" ]; then
            cpack -G DEB && cp *.deb ../artifacts/packages/
            cpack -G RPM && cp *.rpm ../artifacts/packages/
          elif [ "$RUNNER_OS" = "macOS" ]; then
            if command -v create-dmg >/dev/null 2>&1; then
              cpack -G DragNDrop || cpack -G ZIP
            else
              cpack -G ZIP
            fi
            cp *.dmg *.zip ../artifacts/packages/ 2>/dev/null || :
          fi

      # Копирование бинарных файлов
      - name: Copy binaries
        shell: bash
        run: |
          mkdir -p artifacts/binaries
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ \;
              ;;
            Windows)
              find build -name "solver.exe" -type f -exec cp {} artifacts/binaries/ \;
              ;;
          esac

      # Проверка результатов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts directory contents:"
          ls -lhR artifacts/
          if [ "$RUNNER_OS" = "Windows" ]; then
            if ls artifacts/packages/*.msi 1>/dev/null 2>&1; then
              echo "MSI package created successfully"
            else
              echo "ERROR: MSI package not found!"
              exit 1
            fi
          fi
          if [ ! -z "$(ls -A artifacts/)" ]; then
            echo "Artifacts found:"
            ls -lh artifacts/*
          else
            echo "No artifacts found!"
            exit 1
          fi

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7

      # Создание релиза
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
