name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'  # Формат: v1.0.0, v2.1.3 и т.д.

jobs:
  create-release:
    runs-on: ubuntu-latest
    needs: build  # Зависит от job 'build' в build.yml

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Полная история для тегов

    - name: Extract version
      id: version
      run: |
        echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        echo "RELEASE_TITLE=Release v${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Download artifacts from build
      uses: actions/download-artifact@v3
      with:
        name: application-jar  # Должно совпадать с build.yml

    - name: Generate changelog
      run: |
        git log --pretty=format:"- %h %s" HEAD^..HEAD > CHANGELOG.md
        echo "## Full History" >> CHANGELOG.md
        git log --pretty=format:"- %h %s" --graph >> CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: ${{ env.RELEASE_TITLE }}
        body_path: CHANGELOG.md
        files: |
          *.jar
          CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') }}

    - name: Publish to Docker Hub
      if: startsWith(github.ref, 'v')
      run: |
        docker build -t your-repo/app:${{ env.TAG_VERSION }} .
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push your-repo/app:${{ env.TAG_VERSION }}

    - name: Notify stakeholders
      uses: slackapi/slack-github-action@v1.23.0
      with:
        slack-message: |
          :rocket: *New Release Published*
          Version: ${{ env.TAG_VERSION }}
          Release Notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
