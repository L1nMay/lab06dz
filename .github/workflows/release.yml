name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup directories
        shell: bash
        run: |
          mkdir -p artifacts/packages
          mkdir -p artifacts/binaries

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install wixtoolset -y --no-progress --force
          choco install cmake -y --no-progress
          $wixPath = "${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin"
          if (-not (Test-Path $wixPath)) {
              $wixPath = "${env:ProgramFiles}\WiX Toolset v3.14\bin"
          }
          echo "WIX_PATH=$wixPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          refreshenv
          cmake --version

      - name: Prepare WiX assets
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p assets
          # Создаем минимальные необходимые файлы
          echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License\\par}" > LICENSE.rtf
          # Создаем заглушку для иконки (настоящую иконку лучше добавить в репозиторий)
          convert -size 64x64 xc:white assets/icon.ico
          # Создаем заглушки для изображений WiX
          convert -size 493x58 xc:white assets/wix_banner.bmp
          convert -size 493x312 xc:white assets/wix_dialog.bmp

      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel 2

      - name: Create Windows MSI package
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd build

          # Генерируем фиксированные GUID (важно использовать одинаковые для всех версий)
          $UPGRADE_GUID = "PUT-YOUR-UPGRADE-GUID-HERE" # Замените на реальный GUID
          $PRODUCT_GUID = [guid]::NewGuid().ToString().ToUpper()

          # Переконфигурируем с настройками для WiX
          cmake .. `
            -DCPACK_GENERATOR="WIX" `
            -DCPACK_WIX_UPGRADE_GUID="$UPGRADE_GUID" `
            -DCPACK_WIX_PRODUCT_GUID="$PRODUCT_GUID" `
            -DCPACK_PACKAGE_NAME="Solver" `
            -DCPACK_PACKAGE_VERSION="${{ github.ref_name }}" `
            -DCPACK_PACKAGE_VENDOR="Your Company" `
            -DCPACK_RESOURCE_FILE_LICENSE="../LICENSE.rtf" `
            -DCPACK_WIX_PRODUCT_ICON="../assets/icon.ico" `
            -DCPACK_WIX_UI_REF="WixUI_Minimal" `
            -DCPACK_WIX_ARCHITECTURE="x64" `
            -DCPACK_WIX_EXTENSIONS="WixUtilExtension" `
            -DCPACK_PACKAGE_EXECUTABLES="solver;solver" `
            -DCPACK_CREATE_DESKTOP_LINKS="solver"

          # Создаем MSI пакет
          $env:PATH = "$env:WIX_PATH;$env:PATH"
          cpack -G WIX -C Release --verbose 2>&1 | Tee-Object -FilePath "cpack.log"

          if (-not (Test-Path "*.msi")) {
              Write-Host "##[error] MSI creation failed!"
              Write-Host "Last 50 lines of CPack output:"
              Get-Content "cpack.log" -Tail 50
              exit 1
          }

          Copy-Item -Path "*.msi" -Destination "../artifacts/packages/" -Force

      # Остальные шаги (для Linux и macOS) остаются без изменений
      - name: Create Linux packages
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cd build
          cpack -G DEB -C Release && cp *.deb ../artifacts/packages/ || echo "DEB package failed"
          cpack -G RPM -C Release && cp *.rpm ../artifacts/packages/ || echo "RPM package failed"
          cpack -G TGZ -C Release && cp *.tar.gz ../artifacts/packages/ || echo "TGZ package failed"

      - name: Create macOS packages
        if: runner.os == 'macOS'
        shell: bash
        run: |
          cd build
          cpack -G DragNDrop -C Release && cp *.dmg ../artifacts/packages/ || echo "DMG package failed"
          cpack -G ZIP -C Release && cp *.zip ../artifacts/packages/ || echo "ZIP package failed"

      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts contents:"
          ls -lhR artifacts/
          if [ -z "$(ls -A artifacts/packages/ 2>/dev/null)" ]; then
            echo "##[error] No packages created!"
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
