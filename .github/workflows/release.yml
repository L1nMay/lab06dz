name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm
          cmake --version

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --formula cmake create-dmg
          cmake --version

      # Установка WiX Toolset и зависимостей для Windows
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Устанавливаем WiX Toolset
          choco install wixtoolset -y --no-progress
          # Добавляем WiX в PATH
          $wixPath = "${env:ProgramFiles(x86)}\WiX Toolset *\bin"
          if (Test-Path $wixPath) {
              $wixPath = (Get-Item $wixPath).FullName
              echo "WIX_PATH=$wixPath" >> $env:GITHUB_ENV
              echo "::add-path::$wixPath"
          }
          # Устанавливаем CMake и другие зависимости
          choco install cmake --version=3.28.1 -y --no-progress
          choco install imagemagick -y --no-progress  # Для создания иконок
          refreshenv
          # Проверяем установку
          cmake --version
          heat.exe -?
          candle.exe -?
          light.exe -?

      # Подготовка Windows-специфичных файлов
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # Создаем необходимые файлы для WIX
          mkdir -p assets/windows

          # Лицензия RTF
          echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > LICENSE.rtf

          # Иконка (используем convert из ImageMagick)
          convert -size 256x256 xc:black -fill white -draw 'circle 128,128 128,1' assets/windows/icon.ico || echo "Placeholder icon" > assets/windows/icon.ico

          # Изображения для установщика
          convert -size 493x58 xc:gray -fill blue -draw 'rectangle 10,10 483,48' assets/windows/banner.bmp
          convert -size 493x312 xc:gray -fill blue -draw 'rectangle 10,10 483,302' assets/windows/dialog.bmp

          # Создаем минимальный WixTemplate.wxs если его нет
          if [ ! -f WixTemplate.wxs ]; then
            cat > WixTemplate.wxs << 'EOF'
<xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*" Name="Solver" Language="1033" Version="$(var.Version)" Manufacturer="YourCompany" UpgradeCode="$(var.UpgradeCode)">
    <Package InstallerVersion="200" Compressed="yes" Comments="Windows Installer Package"/>
    <Media Id="1" Cabinet="product.cab" EmbedCab="yes"/>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLDIR" Name="Solver">
          <Component Id="ApplicationFiles" Guid="*">
            <File Id="ApplicationFile" Source="$(var.Solver.TargetPath)"/>
          </Component>
        </Directory>
      </Directory>
    </Directory>
    <Feature Id="DefaultFeature" Level="1">
      <ComponentRef Id="ApplicationFiles"/>
    </Feature>
    <UIRef Id="WixUI_Minimal"/>
    <Property Id="WIXUI_INSTALLDIR" Value="INSTALLDIR" />
  </Product>
</Wix>
EOF
          fi

      # Конфигурация и сборка (Windows)
      - name: Configure and Build (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p build
          cd build

          # Генерируем уникальные GUID
          UPGRADE_GUID="$(uuidgen || echo '00000000-0000-0000-0000-000000000000')"
          PRODUCT_GUID="$(uuidgen || echo '11111111-1111-1111-1111-111111111111')"

          # Конфигурация CMake с явным указанием WIX
          cmake .. -DCMAKE_BUILD_TYPE=Release \
            -DCPACK_GENERATOR="WIX;ZIP" \
            -DCPACK_WIX_UPGRADE_GUID="$UPGRADE_GUID" \
            -DCPACK_WIX_PRODUCT_GUID="$PRODUCT_GUID" \
            -DCPACK_WIX_LICENSE_RTF="../LICENSE.rtf" \
            -DCPACK_WIX_PRODUCT_ICON="../assets/windows/icon.ico" \
            -DCPACK_WIX_UI_BANNER="../assets/windows/banner.bmp" \
            -DCPACK_WIX_UI_DIALOG="../assets/windows/dialog.bmp" \
            -DCPACK_WIX_CULTURES="en-US" \
            -DCPACK_WIX_TEMPLATE="../WixTemplate.wxs"

          # Сборка
          cmake --build . --config Release --parallel 2

          # Создание пакетов
          cpack -G WIX -V || cpack -G ZIP

          # Копируем результаты
          mkdir -p ../artifacts/packages
          cp *.msi *.zip ../artifacts/packages/ 2>/dev/null || :

      # Конфигурация и сборка (Linux/macOS)
      - name: Configure and Build (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel 2

      # Создание исходников (только для тегов)
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ github.ref_name }}-src.zip HEAD

      # Создание пакетов (Linux/macOS)
      - name: Create packages (Linux/macOS)
        if: startsWith(github.ref, 'refs/tags/') && runner.os != 'Windows'
        shell: bash
        run: |
          cd build
          mkdir -p ../artifacts/packages

          if [ "$RUNNER_OS" = "Linux" ]; then
            cpack -G DEB && cp *.deb ../artifacts/packages/
            cpack -G RPM && cp *.rpm ../artifacts/packages/
          elif [ "$RUNNER_OS" = "macOS" ]; then
            if command -v create-dmg >/dev/null 2>&1; then
              cpack -G DragNDrop || cpack -G ZIP
            else
              cpack -G ZIP
            fi
            cp *.dmg *.zip ../artifacts/packages/ 2>/dev/null || :
          fi

      # Копирование бинарных файлов
      - name: Copy binaries
        shell: bash
        run: |
          mkdir -p artifacts/binaries
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ \;
              ;;
            Windows)
              find build -name "solver.exe" -type f -exec cp {} artifacts/binaries/ \;
              ;;
          esac

      # Проверка результатов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts directory contents:"
          ls -lhR artifacts/

          if [ "$RUNNER_OS" = "Windows" ]; then
            if ls artifacts/packages/*.msi 1>/dev/null 2>&1; then
              echo "MSI package created successfully"
            elif ls artifacts/packages/*.zip 1>/dev/null 2>&1; then
              echo "ZIP package created as fallback"
            else
              echo "ERROR: No packages created for Windows!"
              exit 1
            fi
          fi

          if [ ! -z "$(ls -A artifacts/)" ]; then
            echo "Artifacts found:"
            ls -lh artifacts/*
          else
            echo "No artifacts found!"
            exit 1
          fi

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
