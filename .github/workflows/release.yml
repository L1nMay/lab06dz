name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей с разделением по ОС
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            cmake build-essential zip rpm \
            libjsoncpp-dev librhash-dev
          cmake --version
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew update --quiet
          brew install --formula cmake || brew upgrade cmake
          cmake --version
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Установка CMake через прямой download
          $cmakeUrl = "https://github.com/Kitware/CMake/releases/download/v3.28.3/cmake-3.28.3-windows-x86_64.msi"
          $cmakeInstaller = "$env:RUNNER_TEMP\cmake-installer.msi"
          (New-Object System.Net.WebClient).DownloadFile($cmakeUrl, $cmakeInstaller)
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i $cmakeInstaller /quiet /qn /norestart ADD_CMAKE_TO_PATH=System" -Wait
          # Установка WiX через Chocolatey
          choco install wixtoolset -y --no-progress --ignore-detected-reboot
          refreshenv
          cmake --version
          # Проверка установки WiX
          light.exe -version
          candle.exe -version

      # Подготовка Windows-specific файлов
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p assets
          if [ ! -f LICENSE.rtf ]; then
            echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > LICENSE.rtf
          fi
          if [ ! -f assets/icon.ico ]; then
            echo "Placeholder" > assets/icon.ico
          fi
          # Создание простого WXS файла, если его нет
          if [ ! -f installer.wxs ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?>' > installer.wxs
            echo '<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">' >> installer.wxs
            echo '  <Product Id="*" Name="Solver" Language="1033" Version="${{ github.ref_name }}" Manufacturer="YourCompany" UpgradeCode="PUT-GUID-HERE">' >> installer.wxs
            echo '    <Package InstallerVersion="200" Compressed="yes" Comments="Windows Installer Package"/>' >> installer.wxs
            echo '    <Media Id="1" Cabinet="media1.cab" EmbedCab="yes"/>' >> installer.wxs
            echo '    <Directory Id="TARGETDIR" Name="SourceDir">' >> installer.wxs
            echo '      <Directory Id="ProgramFilesFolder">' >> installer.wxs
            echo '        <Directory Id="INSTALLDIR" Name="Solver">' >> installer.wxs
            echo '          <Component Id="ApplicationFiles" Guid="PUT-GUID-HERE">' >> installer.wxs
            echo '            <File Id="ApplicationFile" Source="build/Release/solver.exe"/>' >> installer.wxs
            echo '          </Component>' >> installer.wxs
            echo '        </Directory>' >> installer.wxs
            echo '      </Directory>' >> installer.wxs
            echo '    </Directory>' >> installer.wxs
            echo '    <Feature Id="DefaultFeature" Level="1">' >> installer.wxs
            echo '      <ComponentRef Id="ApplicationFiles"/>' >> installer.wxs
            echo '    </Feature>' >> installer.wxs
            echo '  </Product>' >> installer.wxs
            echo '</Wix>' >> installer.wxs
          fi
      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake .. -G "Visual Studio 17 2022" -A x64
            cmake --build . --config Release -- /maxcpucount:2
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release --parallel 2
          fi

      # Создание исходников (только для тегов)
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o "artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz" HEAD
          git archive --format=zip -o "artifacts/source/Solver-${{ github.ref_name }}-src.zip" HEAD

      # Создание пакетов (только для тегов)
      - name: Create packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          cd build
          case "$RUNNER_OS" in
            Linux)
              cpack -G DEB || echo "DEB package creation failed"
              cpack -G RPM || echo "RPM package creation failed"
              ;;
            macOS)
              cpack -G DragNDrop || cpack -G ZIP || echo "Package creation failed"
              ;;
            Windows)
              # Явная проверка WiX перед созданием MSI
              if command -v light.exe >/dev/null 2>&1; then
                echo "WiX tools detected, attempting to create MSI package..."
                cpack -G WIX -C Release || (echo "MSI creation failed with cpack, trying manual build" && \
                  candle.exe ../installer.wxs -out installer.wixobj && \
                  light.exe installer.wixobj -out Solver-${{ github.ref_name }}.msi || \
                  echo "Manual MSI creation also failed")
              else
                echo "WiX not found, cannot create MSI package"
              fi
              # Всегда создаем ZIP как fallback
              cpack -G ZIP || echo "ZIP package creation failed"
              ;;
          esac
          mkdir -p ../artifacts/packages
          cp *.deb *.rpm *.dmg *.msi *.zip ../artifacts/packages/ 2>/dev/null || :

      # Копирование бинарных файлов
      - name: Copy binaries
        shell: bash
        run: |
          mkdir -p artifacts/binaries
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ \;
              ;;
            Windows)
              find build -name "solver.exe" -type f -exec cp {} artifacts/binaries/ \;
              ;;
          esac

      # Проверка результатов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "=== Artifacts structure ==="
          find artifacts/ -type f -exec ls -lh {} \;
          if [ ! -d "artifacts" ] || [ -z "$(ls -A artifacts/)" ]; then
            echo "::error::No artifacts were generated!"
            exit 1
          fi
          echo "=== Package contents ==="
          case "$RUNNER_OS" in
            Linux)   ls -lh artifacts/packages/*.deb artifacts/packages/*.rpm 2>/dev/null || : ;;
            macOS)   ls -lh artifacts/packages/*.dmg artifacts/packages/*.zip 2>/dev/null || : ;;
            Windows) 
              ls -lh artifacts/packages/*.msi artifacts/packages/*.zip 2>/dev/null || : 
              if [ -f artifacts/packages/*.msi ]; then
                echo "MSI package created successfully"
              else
                echo "::warning::MSI package was not created"
              fi
              ;;
          esac

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: artifacts/
          retention-days: 7

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          body: |
            Automated release for version ${{ github.ref_name }}
            ### Assets:
            - Binary packages
            - Source code archives
