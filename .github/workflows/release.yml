name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install Ubuntu dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm imagemagick
          cmake --version
          convert --version

      # Установка зависимостей для macOS
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake create-dmg imagemagick
          cmake --version
          convert --version

      # Установка зависимостей для Windows
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install wixtoolset -y --version 3.11.2 --no-progress --force
          choco install cmake -y --no-progress
          choco install imagemagick -y --no-progress

          $wixPath = "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin"
          echo "WIX_PATH=$wixPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          refreshenv
          cmake --version
          magick --version

      # Подготовка файлов для Windows
      - name: Prepare Windows assets
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p assets/windows

          # Создаем лицензию RTF
          echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > LICENSE.rtf

          # Создаем иконку и изображения
          magick -size 256x256 xc:black -fill white -draw "circle 128,128 128,1" assets/windows/icon.ico
          magick -size 493x58 xc:gray -fill blue -draw "rectangle 10,10 483,48" assets/windows/banner.bmp
          magick -size 493x312 xc:gray -fill blue -draw "rectangle 10,10 483,302" assets/windows/dialog.bmp

          # Создаем WixTemplate.wxs если его нет
          cat << 'WIXEOF' > WixTemplate.wxs
<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
     xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
  <Product Id="*" Name="Solver" Language="1033" Version="1.0.0.0" 
           Manufacturer="YourCompany" UpgradeCode="$(var.UpgradeCode)">
    <Package InstallerVersion="200" Compressed="yes" Comments="Windows Installer Package"/>
    <Media Id="1" Cabinet="product.cab" EmbedCab="yes"/>

    <UI>
      <UIRef Id="WixUI_Minimal"/>
      <Property Id="WIXUI_INSTALLDIR" Value="INSTALLDIR"/>
    </UI>

    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLDIR" Name="Solver">
          <Component Id="ApplicationFiles" Guid="*">
            <File Id="ApplicationFile" Source="$(var.Solver.TargetPath)" KeyPath="yes"/>
          </Component>
        </Directory>
      </Directory>
    </Directory>

    <Feature Id="DefaultFeature" Level="1">
      <ComponentRef Id="ApplicationFiles"/>
    </Feature>
  </Product>
</Wix>
WIXEOF

      # Конфигурация и сборка для Windows
      - name: Build Windows package
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          mkdir build
          cd build

          # Генерируем GUID
          $UPGRADE_GUID = [guid]::NewGuid().ToString()
          $PRODUCT_GUID = [guid]::NewGuid().ToString()

          # Конфигурация CMake
          cmake .. -DCMAKE_BUILD_TYPE=Release `
            -DCPACK_GENERATOR="WIX" `
            -DCPACK_WIX_UPGRADE_GUID="$UPGRADE_GUID" `
            -DCPACK_WIX_PRODUCT_GUID="$PRODUCT_GUID" `
            -DCPACK_WIX_LICENSE_RTF="../LICENSE.rtf" `
            -DCPACK_WIX_PRODUCT_ICON="../assets/windows/icon.ico" `
            -DCPACK_WIX_UI_REF="WixUI_Minimal" `
            -DCPACK_WIX_CULTURES="en-US" `
            -DCPACK_WIX_TEMPLATE="../WixTemplate.wxs" `
            -DCPACK_WIX_EXTENSIONS="WixUtilExtension"

          # Сборка
          cmake --build . --config Release --parallel 2

          # Создание MSI пакета
          cpack -G WIX -V

          # Проверка и копирование результатов
          if (Test-Path "*.msi") {
            mkdir ../artifacts/packages -Force
            Copy-Item "*.msi" ../artifacts/packages/
            Write-Host "MSI package created successfully"
          } else {
            Write-Host "##vso[task.logissue type=error]MSI package creation failed!"
            Get-Content "CPackOutput.log" -Tail 50
            exit 1
          }

      # Конфигурация и сборка для Linux/macOS
      - name: Build Linux/macOS packages
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel 2

          if [ "$RUNNER_OS" = "Linux" ]; then
            cpack -G DEB && cpack -G RPM
          elif [ "$RUNNER_OS" = "macOS" ]; then
            cpack -G DragNDrop || cpack -G ZIP
          fi

      # Создание исходников (только для тегов)
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ github.ref_name }}-src.zip HEAD

      # Копирование бинарных файлов и пакетов
      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p artifacts/{binaries,packages}

          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ \;
              find build -maxdepth 1 -type f \( -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.zip" \) -exec cp {} artifacts/packages/ \;
              ;;
            Windows)
              find build -name "solver.exe" -type f -exec cp {} artifacts/binaries/ \;
              find build -maxdepth 1 -type f -name "*.msi" -exec cp {} artifacts/packages/ \;
              ;;
          esac

      # Проверка артефактов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts directory contents:"
          ls -lhR artifacts/

          if [ ! -z "$(ls -A artifacts/)" ]; then
            echo "Artifacts found:"
            ls -lh artifacts/*
          else
            echo "No artifacts found!"
            exit 1
          fi

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
