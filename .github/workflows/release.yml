name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Общие настройки для всех ОС
      - name: Setup environment
        shell: bash
        run: |
          mkdir -p artifacts/packages
          mkdir -p artifacts/binaries

      # Установка зависимостей для Windows
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install wixtoolset -y --no-progress
          choco install cmake -y --no-progress
          $wixPath = "${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin"
          echo "WIX_PATH=$wixPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          refreshenv
          cmake --version

      # Установка зависимостей для Linux
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm uuid-runtime
          cmake --version

      # Установка зависимостей для macOS
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew update
          brew install cmake create-dmg
          cmake --version

      # Подготовка файлов для WiX (только Windows)
      - name: Prepare WiX files
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p assets/windows
          echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > LICENSE.rtf
          echo "Placeholder icon" > assets/windows/icon.ico

      # Конфигурация и сборка для всех ОС
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel 2

      # Копирование бинарных файлов
      - name: Copy binaries
        shell: bash
        run: |
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ \;
              ;;
            Windows)
              find build -name "solver.exe" -type f -exec cp {} artifacts/binaries/ \;
              ;;
          esac

      # Создание пакетов для Windows (MSI)
      - name: Create Windows package
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd build

          # Генерируем GUID
          $UPGRADE_GUID = [guid]::NewGuid().ToString().ToUpper()
          $PRODUCT_GUID = [guid]::NewGuid().ToString().ToUpper()

          # Переконфигурируем с параметрами WiX
          cmake .. `
            -DCPACK_GENERATOR="WIX" `
            -DCPACK_WIX_UPGRADE_GUID="$UPGRADE_GUID" `
            -DCPACK_WIX_PRODUCT_GUID="$PRODUCT_GUID" `
            -DCPACK_PACKAGE_NAME="Solver" `
            -DCPACK_PACKAGE_VERSION="${{ github.ref_name }}" `
            -DCPACK_WIX_ARCHITECTURE="x64"

          # Создаем MSI пакет
          $env:PATH = "$env:WIX_PATH;$env:PATH"
          cpack -G WIX -C Release --verbose

          # Копируем MSI в артефакты
          Copy-Item -Path "*.msi" -Destination "../artifacts/packages/" -Force

      # Создание пакетов для Linux
      - name: Create Linux packages
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cd build
          cpack -G DEB
          cpack -G RPM
          cp *.deb *.rpm ../artifacts/packages/

      # Создание пакетов для macOS
      - name: Create macOS packages
        if: runner.os == 'macOS'
        shell: bash
        run: |
          cd build
          cpack -G ZIP
          cp *.zip ../artifacts/packages/

      # Проверка артефактов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts contents:"
          ls -lhR artifacts/
          if [ -z "$(ls -A artifacts/packages/ 2>/dev/null)" ]; then
            echo "##[error] No packages created!"
            exit 1
          fi

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
