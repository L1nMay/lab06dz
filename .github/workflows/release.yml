name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm
          cmake --version

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --formula cmake create-dmg
          cmake --version

      # Установка WiX Toolset и зависимостей для Windows
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Устанавливаем WiX Toolset
          choco install wixtoolset -y --version 3.11.2 --no-progress --force

          # Устанавливаем CMake
          choco install cmake -y --no-progress

          # Устанавливаем ImageMagick
          choco install imagemagick -y --no-progress

          # Добавляем WiX в PATH
          $wixPath = "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin"
          echo "WIX_PATH=$wixPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Устанавливаем uuidgen
          choco install util-linux -y --no-progress
          refreshenv

      # Подготовка Windows-специфичных файлов
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p assets/windows

          # Создаем файл лицензии RTF
          echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > LICENSE.rtf

          # Создаем иконку
          magick -size 256x256 xc:black -fill white -draw "circle 128,128 128,1" assets/windows/icon.ico || echo "Placeholder icon" > assets/windows/icon.ico

          # Создаем изображения для установщика
          magick -size 493x58 xc:gray -fill blue -draw "rectangle 10,10 483,48" assets/windows/banner.bmp
          magick -size 493x312 xc:gray -fill blue -draw "rectangle 10,10 483,302" assets/windows/dialog.bmp

          # Создаем WixTemplate.wxs если его нет
          cat << 'EOF' > WixTemplate.wxs
<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
     xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
  <Product Id="*" Name="Solver" Language="1033" Version="$(var.Version)" 
           Manufacturer="YourCompany" UpgradeCode="$(var.UpgradeCode)">
    <Package InstallerVersion="200" Compressed="yes" Comments="Windows Installer Package"/>
    <Media Id="1" Cabinet="product.cab" EmbedCab="yes"/>

    <UI>
      <UIRef Id="WixUI_Minimal"/>
      <Property Id="WIXUI_INSTALLDIR" Value="INSTALLDIR"/>
    </UI>

    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLDIR" Name="Solver">
          <Component Id="ApplicationFiles" Guid="*">
            <File Id="ApplicationFile" Source="$(var.Solver.TargetPath)" KeyPath="yes"/>
          </Component>
        </Directory>
      </Directory>
    </Directory>

    <Feature Id="DefaultFeature" Level="1">
      <ComponentRef Id="ApplicationFiles"/>
    </Feature>
  </Product>
</Wix>
EOF

      # Конфигурация и сборка (Windows)
      - name: Configure and Build (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p build
          cd build

          # Генерируем GUID с помощью PowerShell, если uuidgen недоступен
          UPGRADE_GUID="$([guid]::NewGuid().ToString() || echo '00000000-0000-0000-0000-000000000000')"
          PRODUCT_GUID="$([guid]::NewGuid().ToString() || echo '11111111-1111-1111-1111-111111111111')"

          # Конфигурация CMake
          cmake .. -DCMAKE_BUILD_TYPE=Release \
            -DCPACK_GENERATOR="WIX" \
            -DCPACK_WIX_UPGRADE_GUID="$UPGRADE_GUID" \
            -DCPACK_WIX_PRODUCT_GUID="$PRODUCT_GUID" \
            -DCPACK_WIX_LICENSE_RTF="../LICENSE.rtf" \
            -DCPACK_WIX_PRODUCT_ICON="../assets/windows/icon.ico" \
            -DCPACK_WIX_UI_REF="WixUI_Minimal" \
            -DCPACK_WIX_CULTURES="en-US" \
            -DCPACK_WIX_TEMPLATE="../WixTemplate.wxs" \
            -DCPACK_WIX_EXTENSIONS="WixUtilExtension"

          # Сборка
          cmake --build . --config Release --parallel 2

          # Создание пакета
          cpack -G WIX -V

          # Копирование результатов
          mkdir -p ../artifacts/packages
          cp *.msi ../artifacts/packages/ || (echo "MSI creation failed!" && exit 1)

      # Остальные шаги (Linux/macOS) остаются без изменений
      # ... (ваши существующие шаги для Linux и macOS)

      # Проверка MSI пакета
      - name: Verify MSI package
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $msi = Get-ChildItem -Path "artifacts/packages/*.msi" -ErrorAction SilentlyContinue
          if ($msi) {
            Write-Host "MSI package created successfully at $($msi.FullName)"
            Write-Host "Package size: $($msi.Length/1KB) KB"
          } else {
            Write-Host "##[error] MSI package creation failed!"
            Get-Content "build/CPackOutput.log" | Select-Object -Last 50
            exit 1
          }

      # Остальные шаги (загрузка артефактов, создание релиза) остаются без изменений
      # ... (ваши существующие шаги для upload-artifact и создания релиза)
