name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm
          cmake --version

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --formula cmake create-dmg
          cmake --version

      # Установка зависимостей для Windows (улучшенная версия)
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $ProgressPreference = 'SilentlyContinue'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          # Проверяем, установлен ли уже Chocolatey
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              Set-ExecutionPolicy Bypass -Scope Process -Force
              iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
              $env:Path = [System.Environment]::GetEnvironmentVariable('Path','Machine') + ";" + [System.Environment]::GetEnvironmentVariable('Path','User')
          }

          # Устанавливаем необходимые пакеты
          choco install cmake --version=3.28.1 -y --no-progress
          choco install wixtoolset -y --no-progress

          # Добавляем WiX в PATH
          $wixPath = "${env:ProgramFiles(x86)}\WiX Toolset *\bin"
          if (Test-Path $wixPath) {
              $wixPath = (Get-Item $wixPath).FullName
              Add-Content $env:GITHUB_PATH "$wixPath"
          }

          refreshenv
          cmake --version
          heat.exe -? | Out-Null
          candle.exe -? | Out-Null
          light.exe -? | Out-Null

      # Подготовка Windows-specific файлов (улучшенная версия)
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # Создаем файл лицензии RTF, если его нет
          if [ ! -f LICENSE.rtf ]; then
            echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > LICENSE.rtf
          fi

          # Создаем assets директорию и иконку, если их нет
          mkdir -p assets/windows
          if [ ! -f assets/windows/icon.ico ]; then
            # Создаем простую иконку (можете заменить на свою)
            convert -size 256x256 xc:black -fill white -draw 'circle 128,128 128,1' assets/windows/icon.ico || echo "Using placeholder icon" > assets/windows/icon.ico
          fi

          # Создаем banner и dialog изображения для WiX
          if [ ! -f assets/windows/banner.bmp ]; then
            convert -size 493x58 xc:gray -fill blue -draw 'rectangle 10,10 483,48' assets/windows/banner.bmp || echo "Using placeholder banner" > assets/windows/banner.bmp
          fi
          if [ ! -f assets/windows/dialog.bmp ]; then
            convert -size 493x312 xc:gray -fill blue -draw 'rectangle 10,10 483,302' assets/windows/dialog.bmp || echo "Using placeholder dialog" > assets/windows/dialog.bmp
          fi

      # Сборка проекта (улучшенная версия для Windows)
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release \
              -DCPACK_GENERATOR="ZIP;WIX" \
              -DCPACK_WIX_UPGRADE_GUID="$(uuidgen || echo '00000000-0000-0000-0000-000000000000')" \
              -DCPACK_WIX_PRODUCT_GUID="$(uuidgen || echo '11111111-1111-1111-1111-111111111111')" \
              -DCPACK_WIX_LICENSE_RTF="../LICENSE.rtf" \
              -DCPACK_WIX_PRODUCT_ICON="../assets/windows/icon.ico" \
              -DCPACK_WIX_UI_BANNER="../assets/windows/banner.bmp" \
              -DCPACK_WIX_UI_DIALOG="../assets/windows/dialog.bmp" \
              -DCPACK_WIX_CULTURES="en-US" \
              -DCPACK_WIX_TEMPLATE="../WixTemplate.wxs" 2>&1 | tee cmake.log
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release 2>&1 | tee cmake.log
          fi
          cmake --build . --config Release --parallel 2 2>&1 | tee build.log
          cat cmake.log
          cat build.log

      # Создание исходников (только для тегов)
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ github.ref_name }}-src.zip HEAD

      # Создание пакетов (улучшенная версия для Windows)
      - name: Create packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          cd build
          mkdir -p ../artifacts/packages

          if [ "$RUNNER_OS" = "Linux" ]; then
            # Create both DEB and RPM packages
            cpack -G DEB && cp *.deb ../artifacts/packages/
            cpack -G RPM && cp *.rpm ../artifacts/packages/
          elif [ "$RUNNER_OS" = "macOS" ]; then
            # Create DMG package (fallback to ZIP if DMG fails)
            if command -v create-dmg >/dev/null 2>&1; then
              cpack -G DragNDrop || cpack -G ZIP
            else
              cpack -G ZIP
            fi
            cp *.dmg *.zip ../artifacts/packages/ 2>/dev/null || :
          elif [ "$RUNNER_OS" = "Windows" ]; then
            # Сначала проверяем, доступен ли WiX
            if command -v light.exe >/dev/null 2>&1; then
              echo "WiX Toolset is available, attempting to create MSI package..."
              # Убедимся, что все файлы на месте перед упаковкой
              find . -name "*.exe" -o -name "*.dll" | xargs -I {} ls -lah {}
              # Пробуем создать MSI
              cpack -G WIX -V 2>&1 | tee cpack.log
              cp *.msi ../artifacts/packages/ 2>/dev/null || :
              cat cpack.log

              # Если MSI не создался, создаем ZIP
              if [ ! -f *.msi ]; then
                echo "MSI creation failed, falling back to ZIP"
                cpack -G ZIP
              fi
            else
              echo "WiX Toolset not found, creating ZIP package instead"
              cpack -G ZIP
            fi
            cp *.msi *.zip ../artifacts/packages/ 2>/dev/null || :
          fi

          # Дополнительная проверка созданных пакетов
          ls -lah ../artifacts/packages/

      # Копирование бинарных файлов
      - name: Copy binaries
        shell: bash
        run: |
          mkdir -p artifacts/binaries
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ \;
              ;;
            Windows)
              find build -name "solver.exe" -type f -exec cp {} artifacts/binaries/ \;
              ;;
          esac

      # Проверка результатов (улучшенная версия)
      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts directory contents:"
          ls -lhR artifacts/

          # Проверяем, что для Windows создался MSI или ZIP
          if [ "$RUNNER_OS" = "Windows" ]; then
            if ls artifacts/packages/*.msi 1>/dev/null 2>&1; then
              echo "MSI package created successfully"
            elif ls artifacts/packages/*.zip 1>/dev/null 2>&1; then
              echo "ZIP package created as fallback"
            else
              echo "ERROR: No packages created for Windows!"
              exit 1
            fi
          fi

          if [ ! -z "$(ls -A artifacts/)" ]; then
            echo "Artifacts found:"
            ls -lh artifacts/*
          else
            echo "No artifacts found!"
            exit 1
          fi

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
