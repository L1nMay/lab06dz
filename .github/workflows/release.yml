name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    continue-on-error: false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm python3 uuid-runtime
          cmake --version

      # Установка зависимостей для macOS
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake python
          cmake --version

      # Установка зависимостей для Windows
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Установка WiX Toolset
          $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip"
          $wixPath = "$env:RUNNER_TEMP\wix"
          New-Item -ItemType Directory -Path $wixPath -Force
          Invoke-WebRequest -Uri $wixUrl -OutFile "$env:RUNNER_TEMP\wix.zip"
          Expand-Archive -Path "$env:RUNNER_TEMP\wix.zip" -DestinationPath $wixPath -Force
          echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Append

          # Установка CMake и Python
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y --no-progress
          choco install python -y --no-progress
          refreshenv

      # Подготовка Windows-файлов
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p wix
          echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > wix/LICENSE.rtf
          curl -sSL -o wix/icon.ico https://raw.githubusercontent.com/microsoft/fluentui-system-icons/master/assets/App%20Icon/ic_fluent_app_icon_24_filled.ico

          # WXS-файл с фиксированной версией
          cat << 'EOF' > wix/installer.wxs
          <?xml version="1.0"?>
          <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
            <Product Id="*" Name="Solver" Language="1033" Version="1.0.0"
                   Manufacturer="Your Company" UpgradeCode="PUT-GUID-HERE">
              <Package InstallerVersion="200" Compressed="yes" Comments="Windows Installer Package"/>
              <Media Id="1" Cabinet="media1.cab" EmbedCab="yes"/>
              <Directory Id="TARGETDIR" Name="SourceDir">
                <Directory Id="ProgramFilesFolder">
                  <Directory Id="INSTALLDIR" Name="Solver">
                    <Component Id="ApplicationFiles" Guid="*">
                      <File Id="ApplicationFile" Source="PUT-SOURCE-PATH-HERE" KeyPath="yes"/>
                    </Component>
                  </Directory>
                </Directory>
              </Directory>
              <Feature Id="DefaultFeature" Level="1">
                <ComponentRef Id="ApplicationFiles"/>
              </Feature>
              <Icon Id="icon.ico" SourceFile="PUT-ICON-PATH-HERE"/>
              <Property Id="ARPPRODUCTICON" Value="icon.ico"/>
              <WixVariable Id="WixUILicenseRtf" Value="PUT-LICENSE-PATH-HERE"/>
            </Product>
          </Wix>
          EOF

      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel 2

      # Создание пакетов (только для тегов)
      - name: Create packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/packages
          cd build

          if [ "$RUNNER_OS" = "Linux" ]; then
            cpack -G DEB && cpack -G RPM
            cp *.deb *.rpm ../artifacts/packages/ || echo "No DEB/RPM packages created"

          elif [ "$RUNNER_OS" = "macOS" ]; then
            cpack -G ZIP
            cpack -G DragNDrop || echo "DMG creation failed"
            cp *.zip *.dmg ../artifacts/packages/ 2>/dev/null || :

          elif [ "$RUNNER_OS" = "Windows" ]; then
            # Генерация GUID
            UPGRADE_CODE=$(python -c "import uuid; print(str(uuid.uuid4()).upper())")

            # Подготовка WXS файла
            sed -i "s|PUT-GUID-HERE|$UPGRADE_CODE|g" ../wix/installer.wxs
            sed -i "s|PUT-SOURCE-PATH-HERE|$(pwd)/Release/solver.exe|g" ../wix/installer.wxs
            sed -i "s|PUT-ICON-PATH-HERE|$(pwd)/../wix/icon.ico|g" ../wix/installer.wxs
            sed -i "s|PUT-LICENSE-PATH-HERE|$(pwd)/../wix/LICENSE.rtf|g" ../wix/installer.wxs

            # Сборка MSI
            candle.exe ../wix/installer.wxs -out installer.wixobj
            light.exe installer.wixobj -out Solver-${{ github.ref_name }}-Windows.msi -ext WixUIExtension
            cp *.msi ../artifacts/packages/

            # Дополнительно создаем ZIP
            cpack -G ZIP
            cp *.zip ../artifacts/packages/
          fi

          echo "Created packages:"
          ls -lh ../artifacts/packages/ || echo "No packages were created"

      # Копирование бинарных файлов (только для тегов)
      - name: Copy binaries
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/binaries
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ || :
              ;;
            Windows)
              find build -name "solver.exe" -type f -exec cp {} artifacts/binaries/ || :
              ;;
          esac

      # Загрузка артефактов (только для тегов)
      - name: Upload artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7
          if-no-files-found: warn

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/packages/*
            artifacts/binaries/*
            artifacts/source/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
