name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Linux
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            cmake build-essential zip rpm \
            libjsoncpp-dev librhash-dev uuid-runtime
          cmake --version

      # Установка зависимостей для macOS
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew update --quiet
          brew install cmake || brew upgrade cmake
          cmake --version

      # Установка зависимостей для Windows
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Установка WiX Toolset
          choco install wixtoolset -y --no-progress --ignore-detected-reboot
          # Установка CMake
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          refreshenv

          # Проверка установленных инструментов
          Write-Host "CMake version:"
          cmake --version
          Write-Host "WiX version:"
          light.exe -version
          candle.exe -version

      # Подготовка файлов для Windows
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Создаем необходимые директории
          New-Item -ItemType Directory -Path "assets" -Force | Out-Null

          # Создаем LICENSE.rtf если его нет
          if (-not (Test-Path "LICENSE.rtf")) {
            @"
{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22 Sample License Text\par }
"@ | Out-File -Encoding ASCII "LICENSE.rtf"
          }

          # Создаем иконку если ее нет
          if (-not (Test-Path "assets\icon.ico")) {
            [byte[]]$iconBytes = 0x00,0x00,0x01,0x00,0x01,0x00,0x10,0x10,0x00,0x00,0x01,0x00,0x20,0x00,0x68,0x04,
                                0x00,0x00,0x16,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x20,0x00,
                                0x00,0x00,0x01,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
            [System.IO.File]::WriteAllBytes("assets\icon.ico", $iconBytes)
          }

          # Создаем WXS файл если его нет
          if (-not (Test-Path "installer.wxs")) {
            $guid1 = [guid]::NewGuid().ToString().ToUpper()
            $guid2 = [guid]::NewGuid().ToString().ToUpper()
            @"
<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*" Name="Solver" Language="1033" Version="$env:GITHUB_REF_NAME" Manufacturer="YourCompany" UpgradeCode="$guid1">
    <Package InstallerVersion="200" Compressed="yes" Comments="Windows Installer Package"/>
    <Media Id="1" Cabinet="media1.cab" EmbedCab="yes"/>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLDIR" Name="Solver">
          <Component Id="ApplicationFiles" Guid="$guid2">
            <File Id="ApplicationFile" Source="build\Release\solver.exe"/>
          </Component>
        </Directory>
      </Directory>
    </Directory>
    <Feature Id="DefaultFeature" Level="1">
      <ComponentRef Id="ApplicationFiles"/>
    </Feature>
  </Product>
</Wix>
"@ | Out-File -Encoding UTF8 "installer.wxs"
          }

      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake .. -G "Visual Studio 17 2022" -A x64 -DCPACK_GENERATOR="WIX;ZIP"
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release
          fi
          cmake --build . --config Release --parallel 2

      # Создание исходников (только для тегов)
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o "artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz" HEAD
          git archive --format=zip -o "artifacts/source/Solver-${{ github.ref_name }}-src.zip" HEAD

      # Создание пакетов (только для тегов)
      - name: Create packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          cd build
          case "$RUNNER_OS" in
            Linux)
              cpack -G DEB || echo "DEB package creation failed"
              cpack -G RPM || echo "RPM package creation failed"
              ;;
            macOS)
              cpack -G DragNDrop || cpack -G ZIP || echo "Package creation failed"
              ;;
            Windows)
              # Создаем MSI через WiX
              echo "Creating MSI package..."
              candle.exe ../installer.wxs -out installer.wixobj || echo "WXS compilation failed"
              light.exe -ext WixUIExtension installer.wixobj -out Solver-${{ github.ref_name }}.msi || echo "MSI linking failed"

              # Создаем ZIP архив
              echo "Creating ZIP package..."
              cpack -G ZIP -C Release || echo "ZIP creation failed"
              ;;
          esac
          mkdir -p ../artifacts/packages
          cp *.deb *.rpm *.dmg *.msi *.zip ../artifacts/packages/ 2>/dev/null || :

      # Проверка результатов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "=== Artifacts structure ==="
          find artifacts/ -type f -exec ls -lh {} \;
          if [ ! -d "artifacts" ] || [ -z "$(ls -A artifacts/)" ]; then
            echo "::error::No artifacts were generated!"
            exit 1
          fi

          echo "=== Package contents ==="
          case "$RUNNER_OS" in
            Linux)
              ls -lh artifacts/packages/*.deb artifacts/packages/*.rpm 2>/dev/null || :
              ;;
            macOS)
              ls -lh artifacts/packages/*.dmg artifacts/packages/*.zip 2>/dev/null || :
              ;;
            Windows)
              ls -lh artifacts/packages/*.msi artifacts/packages/*.zip 2>/dev/null || :
              if [ -f artifacts/packages/*.msi ]; then
                echo "MSI package created successfully"
              else
                echo "::warning::MSI package was not created"
              fi
              ;;
          esac

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: artifacts/
          retention-days: 7

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          body: |
            Automated release for version ${{ github.ref_name }}
            ### Assets:
            - Binary packages (.deb, .rpm, .dmg, .msi, .zip)
            - Source code archives
