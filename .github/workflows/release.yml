name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Linux
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm python3 uuid-runtime
          cmake --version

      # Установка зависимостей для macOS
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake python
          cmake --version

      # Установка зависимостей для Windows
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Установка WiX Toolset
          $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip"
          $wixPath = "$env:RUNNER_TEMP\wix"
          New-Item -ItemType Directory -Path $wixPath -Force
          Invoke-WebRequest -Uri $wixUrl -OutFile "$env:RUNNER_TEMP\wix.zip"
          Expand-Archive -Path "$env:RUNNER_TEMP\wix.zip" -DestinationPath $wixPath -Force
          echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Append

          # Установка CMake и Python
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y --no-progress
          choco install python -y --no-progress
          refreshenv

      # Подготовка Windows-файлов
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Создание директории wix
          New-Item -ItemType Directory -Path wix -Force

          # Создание файла лицензии
          @"
{\rtf1\ansi\deff0{\fonttbl{\f0\fnil\fcharset0 Calibri;}}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22 Sample License Text\par }
"@ | Out-File -FilePath wix/LICENSE.rtf -Encoding ASCII

          # Скачивание иконки
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/microsoft/fluentui-system-icons/master/assets/App%20Icon/ic_fluent_app_icon_24_filled.ico" -OutFile wix/icon.ico

          # Создание WXS файла
          @"
<?xml version="1.0"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*" Name="Solver" Language="1033" Version="1.0.0"
         Manufacturer="Your Company" UpgradeCode="PUT-UPGRADE-CODE-HERE">
    <Package InstallerVersion="200" Compressed="yes" Comments="Windows Installer Package"/>
    <Media Id="1" Cabinet="media1.cab" EmbedCab="yes"/>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLDIR" Name="Solver">
          <Component Id="ApplicationFiles" Guid="*">
            <File Id="ApplicationFile" Source="PUT-SOURCE-PATH-HERE" KeyPath="yes"/>
          </Component>
        </Directory>
      </Directory>
    </Directory>
    <Feature Id="DefaultFeature" Level="1">
      <ComponentRef Id="ApplicationFiles"/>
    </Feature>
    <Icon Id="icon.ico" SourceFile="PUT-ICON-PATH-HERE"/>
    <Property Id="ARPPRODUCTICON" Value="icon.ico"/>
    <WixVariable Id="WixUILicenseRtf" Value="PUT-LICENSE-PATH-HERE"/>
  </Product>
</Wix>
"@ | Out-File -FilePath wix/installer.wxs -Encoding ASCII

      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          if [ "$RUNNER_OS" = "Windows" ]; then
            # Для Windows явно указываем выходной каталог
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=$(pwd)/Release
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release
          fi
          cmake --build . --config Release --parallel 2

      # Создание исходников (только для тегов)
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ github.ref_name }}-src.zip HEAD

      # Создание пакетов (только для тегов)
      - name: Create packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: powershell
        run: |
          mkdir -p artifacts/packages
          cd build

          if ($env:RUNNER_OS -eq "Linux") {
            bash -c "cpack -G DEB && cpack -G RPM"
            cp *.deb *.rpm ../artifacts/packages/ -ErrorAction SilentlyContinue
          }
          elseif ($env:RUNNER_OS -eq "macOS") {
            bash -c "cpack -G ZIP && cpack -G DragNDrop"
            cp *.zip *.dmg ../artifacts/packages/ -ErrorAction SilentlyContinue
          }
          elseif ($env:RUNNER_OS -eq "Windows") {
            # Генерация GUID
            $UPGRADE_CODE = python -c "import uuid; print(str(uuid.uuid4()).upper())"

            # Полные пути к файлам
            $SOURCE_PATH = "$(Get-Location)\Release\solver.exe"
            $ICON_PATH = "$(Get-Location)\..\wix\icon.ico"
            $LICENSE_PATH = "$(Get-Location)\..\wix\LICENSE.rtf"

            # Подготовка WXS файла
            (Get-Content ..\wix\installer.wxs) |
              ForEach-Object { $_ -replace "PUT-UPGRADE-CODE-HERE", $UPGRADE_CODE } |
              ForEach-Object { $_ -replace "PUT-SOURCE-PATH-HERE", $SOURCE_PATH } |
              ForEach-Object { $_ -replace "PUT-ICON-PATH-HERE", $ICON_PATH } |
              ForEach-Object { $_ -replace "PUT-LICENSE-PATH-HERE", $LICENSE_PATH } |
              Set-Content ..\wix\installer.wxs

            # Сборка MSI
            & "$env:RUNNER_TEMP\wix\candle.exe" ..\wix\installer.wxs -out installer.wixobj
            & "$env:RUNNER_TEMP\wix\light.exe" installer.wixobj -out "Solver-${{ github.ref_name }}-Windows.msi" -ext WixUIExtension
            cp *.msi ../artifacts/packages/ -ErrorAction SilentlyContinue

            # Дополнительно создаем ZIP
            cpack -G ZIP
            cp *.zip ../artifacts/packages/ -ErrorAction SilentlyContinue
          }

          Write-Host "Created packages:"
          ls ../artifacts/packages/ -ErrorAction SilentlyContinue

      # Копирование бинарных файлов (только для тегов)
      - name: Copy binaries
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/binaries
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ || :
              ;;
            Windows)
              find build/Release -name "solver.exe" -type f -exec cp {} artifacts/binaries/ || :
              ;;
          esac

      # Проверка результатов (только для тегов)
      - name: Verify artifacts
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          echo "Artifacts directory contents:"
          ls -lhR artifacts/ || :
          if [ ! -z "$(ls -A artifacts/ 2>/dev/null)" ]; then
            echo "Artifacts found:"
            ls -lh artifacts/*
          else
            echo "No artifacts found!"
            exit 1
          fi

      # Загрузка артефактов (только для тегов)
      - name: Upload artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7
          if-no-files-found: warn

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
