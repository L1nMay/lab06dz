name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm
          cmake --version

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --formula cmake
          cmake --version

      # Установка зависимостей для Windows с улучшенной обработкой ошибок
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $ProgressPreference = 'SilentlyContinue'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          try {
            if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              Set-ExecutionPolicy Bypass -Scope Process -Force
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
              iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            }
            choco install cmake --version=3.28.1 -y --no-progress --fail-on-error-output --timeout 900
            choco install wixtoolset -y --no-progress
            refreshenv
            cmake --version
          } catch {
            Write-Error "Failed to install dependencies: $_"
            exit 1
          }

      # Подготовка Windows-specific файлов
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: bash
        run: |
          if [ ! -f LICENSE.rtf ]; then
            echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > LICENSE.rtf
          fi
          mkdir -p assets
          if [ ! -f assets/icon.ico ]; then
            echo "Placeholder icon" > assets/icon.ico
          fi

      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release \
              -DCPACK_WIX_UPGRADE_GUID="$(uuidgen || echo '00000000-0000-0000-0000-000000000000')" \
              -DCPACK_WIX_PRODUCT_GUID="$(uuidgen || echo '11111111-1111-1111-1111-111111111111')" \
              -DCPACK_WIX_LICENSE_RTF="../LICENSE.rtf" \
              -DCPACK_WIX_PRODUCT_ICON="../assets/icon.ico"
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release
          fi
          cmake --build . --config Release --parallel 2

      # Создание исходников (только для тегов)
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ github.ref_name }}-src.zip HEAD

      # Создание пакетов (только для тегов)
      - name: Create packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          cd build
          if [ "$RUNNER_OS" = "Linux" ]; then
            cpack -G DEB && cpack -G RPM
          elif [ "$RUNNER_OS" = "macOS" ]; then
            cpack -G DragNDrop || cpack -G ZIP
          elif [ "$RUNNER_OS" = "Windows" ]; then
            if command -v heat.exe >/dev/null 2>&1; then
              cpack -G WIX || cpack -G ZIP
            else
              cpack -G ZIP
              echo "WiX not found, created ZIP package instead" >&2
            fi
          fi
          mkdir -p ../artifacts/packages
          cp *.deb *.rpm *.dmg *.msi *.zip ../artifacts/packages/ 2>/dev/null || :

      # Копирование бинарных файлов
      - name: Copy binaries
        shell: bash
        run: |
          mkdir -p artifacts/binaries
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -type f -exec cp {} artifacts/binaries/ \;
              ;;
            Windows)
              find build -name "solver.exe" -type f -exec cp {} artifacts/binaries/ \;
              ;;
          esac

      # Проверка результатов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts directory contents:"
          ls -lhR artifacts/
          if [ ! -z "$(ls -A artifacts/)" ]; then
            echo "Artifacts found:"
            ls -lh artifacts/*
          else
            echo "No artifacts found!"
            exit 1
          fi

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
