name: Release Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

permissions:
  contents: write
  packages: write

env:
  WIX_ROOT: C:\Program Files (x86)\WiX Toolset v3.11\

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            cmake build-essential zip rpm \
            libjsoncpp-dev librhash-dev
          cmake --version

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew update --quiet
          brew install --formula cmake || brew upgrade cmake
          cmake --version

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Установка CMake
          $cmakeUrl = "https://github.com/Kitware/CMake/releases/download/v3.28.3/cmake-3.28.3-windows-x86_64.msi"
          $cmakeInstaller = "$env:RUNNER_TEMP\cmake-installer.msi"
          Invoke-WebRequest -Uri $cmakeUrl -OutFile $cmakeInstaller
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i $cmakeInstaller /quiet /qn /norestart ADD_CMAKE_TO_PATH=System" -Wait

          # Установка WiX через Chocolatey
          choco install wixtoolset -y --no-progress --ignore-detected-reboot
          refreshenv

          # Проверка установки
          cmake --version
          light.exe -version
          candle.exe -version

      # Подготовка Windows-specific файлов
      - name: Prepare Windows files
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p assets
          # Создание файла лицензии
          echo "{\\rtf1\\ansi\\deff0{\\fonttbl{\\f0\\fnil\\fcharset0 Calibri;}}\\viewkind4\\uc1\\pard\\sa200\\sl276\\slmult1\\lang9\\f0\\fs22 Sample License Text\\par }" > LICENSE.rtf

          # Создание иконки (заглушка)
          echo "Placeholder" > assets/icon.ico

      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake .. -G "Visual Studio 17 2022" -A x64
            cmake --build . --config Release -- /maxcpucount:2
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release --parallel 2
          fi

      # Проверка бинарного файла (особенно для Windows)
      - name: Verify binary exists
        shell: bash
        run: |
          echo "Checking for binary file..."
          case "$RUNNER_OS" in
            Linux|macOS)
              find build -name "solver" -exec ls -lh {} \;
              ;;
            Windows)
              find build -name "solver.exe" -exec ls -lh {} \;
              if [ ! -f "build/Release/solver.exe" ]; then
                echo "::error::solver.exe not found in build/Release/"
                exit 1
              fi
              ;;
          esac

      # Создание исходников (только для тегов)
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o "artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz" HEAD
          git archive --format=zip -o "artifacts/source/Solver-${{ github.ref_name }}-src.zip" HEAD

      # Создание пакетов (только для тегов)
      - name: Create packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          cd build
          case "$RUNNER_OS" in
            Linux)
              cpack -G DEB
              cpack -G RPM
              ;;
            macOS)
              cpack -G DragNDrop || cpack -G ZIP
              ;;
            Windows)
              # Генерация GUIDs через PowerShell
              UPGRADE_GUID="$(powershell -Command "[guid]::NewGuid().ToString().ToUpper()")"
              PRODUCT_GUID="$(powershell -Command "[guid]::NewGuid().ToString().ToUpper()")"
              COMPONENT_GUID="$(powershell -Command "[guid]::NewGuid().ToString().ToUpper()")"

              echo "Generated GUIDs for Windows package:"
              echo "Upgrade: $UPGRADE_GUID"
              echo "Product: $PRODUCT_GUID"
              echo "Component: $COMPONENT_GUID"

              # Конфигурация CPack для WiX
              cmake .. \
                -DCPACK_GENERATOR="WIX" \
                -DCPACK_PACKAGE_NAME="Solver" \
                -DCPACK_PACKAGE_VENDOR="YourCompany" \
                -DCPACK_PACKAGE_VERSION="${{ github.ref_name }}" \
                -DCPACK_WIX_UPGRADE_GUID="$UPGRADE_GUID" \
                -DCPACK_WIX_PRODUCT_GUID="$PRODUCT_GUID" \
                -DCPACK_WIX_PRODUCT_ICON="../assets/icon.ico" \
                -DCPACK_WIX_LICENSE_RTF="../LICENSE.rtf" \
                -DCPACK_WIX_UI_REF="WixUI_InstallDir"

              # Пересборка с новой конфигурацией
              cmake --build . --config Release

              # Создание MSI пакета
              echo "Creating MSI package..."
              cpack -G WIX -C Release || (echo "CPack failed, trying manual WiX build" && \
                candle.exe -arch x64 -out "installer.wixobj" "../installer.wxs" && \
                light.exe -ext WixUIExtension -out "Solver-${{ github.ref_name }}.msi" "installer.wixobj")

              # Создание ZIP как fallback
              cpack -G ZIP
              ;;
          esac

          # Копирование созданных пакетов
          mkdir -p ../artifacts/packages
          cp *.deb *.rpm *.dmg *.msi *.zip ../artifacts/packages/ 2>/dev/null || :

      # Проверка результатов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "=== Artifacts structure ==="
          find artifacts/ -type f -exec ls -lh {} \;

          echo "=== Package contents ==="
          case "$RUNNER_OS" in
            Linux)   ls -lh artifacts/packages/*.deb artifacts/packages/*.rpm 2>/dev/null || : ;;
            macOS)   ls -lh artifacts/packages/*.dmg artifacts/packages/*.zip 2>/dev/null || : ;;
            Windows)
              ls -lh artifacts/packages/*.msi artifacts/packages/*.zip 2>/dev/null || :
              if ls artifacts/packages/*.msi 1> /dev/null 2>&1; then
                echo "MSI package created successfully"
              else
                echo "::warning::MSI package was not created"
                echo "Trying to find any generated MSI files..."
                find build -name "*.msi" -exec ls -lh {} \; || :
              fi
              ;;
          esac

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: artifacts/
          retention-days: 7

      # Создание релиза (только для тегов)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Solver ${{ github.ref_name }}
          files: |
            artifacts/source/*
            artifacts/packages/*
            artifacts/binaries/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          body: |
            Automated release for version ${{ github.ref_name }}
            ### Assets:
            - Binary packages
            - Source code archives
