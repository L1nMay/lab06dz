name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm jq
          cmake --version

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake
          cmake --version

      # Установка зависимостей для Windows
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install cmake --version=3.28.1 -y --no-progress
          refreshenv
          cmake --version

      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release
          fi
          cmake --build . --config Release --parallel 2

      # Создание пакетов
      - name: Create packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          cd build
          case "$RUNNER_OS" in
            Linux)
              cpack -G DEB
              cpack -G RPM
              ;;
            macOS)
              cpack -G DragNDrop
              ;;
            Windows)
              cpack -G WIX
              ;;
          esac
          mkdir -p ../artifacts/packages
          cp *.deb *.rpm *.dmg *.msi ../artifacts/packages/ 2>/dev/null || :

      # Создание исходников
      - name: Create source packages
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ github.ref_name }}-src.zip HEAD

      # Создание релиза
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const files = [
              ...fs.readdirSync('artifacts/source'),
              ...fs.readdirSync('artifacts/packages')
            ].map(f => `artifacts/${f.includes('-src.') ? 'source' : 'packages'}/${f}`);

            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.GITHUB_REF.replace('refs/tags/', ''),
              name: process.env.GITHUB_REF.replace('refs/tags/', ''),
              draft: false,
              prerelease: false,
              body: "Automated release"
            }).then(async ({data: release}) => {
              for (const file of files) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                  name: file.split('/').pop(),
                  data: fs.readFileSync(file)
                });
              }
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
