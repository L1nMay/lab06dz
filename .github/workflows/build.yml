name: Cross-Platform Build

on:
  push:
    tags: ['v*.*.*']
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-12]
    runs-on: ${{ matrix.os }}

    timeout-minutes: 30
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zlib1g-dev

      - name: Install CMake (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake pkg-config

      - name: Install CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System' --no-progress
          choco install -y ninja --no-progress

      - name: Configure project
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          echo "Configured on ${{ runner.os }}"

      - name: Build project
        run: |
          cmake --build build --config Release
          echo "Build completed on ${{ runner.os }}"

      - name: Package artifacts
        run: |
          cd build
          if [ "${{ runner.os }}" == "Linux" ]; then
            cpack -G "TGZ;DEB"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            cpack -G "DragNDrop;ZIP"
          else
            cpack -G "WIX;ZIP"
          fi
          mkdir -p ../artifacts
          find . -maxdepth 1 -type f \( -name '*.tar.gz' -o -name '*.deb' -o -name '*.zip' -o -name '*.dmg' -o -name '*.msi' \) -exec mv {} ../artifacts/ \;

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ runner.os }}
          path: artifacts/*
          retention-days: 5

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-packages

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-packages/**/*
          generate_release_notes: truename: Cross-Platform Build

on:
  push:
    tags: ['v*.*.*']
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-12]
    runs-on: ${{ matrix.os }}

    timeout-minutes: 30
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zlib1g-dev

      - name: Install CMake (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake pkg-config

      - name: Install CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System' --no-progress
          choco install -y ninja --no-progress

      - name: Configure project
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          echo "Configured on ${{ runner.os }}"

      - name: Build project
        run: |
          cmake --build build --config Release
          echo "Build completed on ${{ runner.os }}"

      - name: Package artifacts
        run: |
          cd build
          if [ "${{ runner.os }}" == "Linux" ]; then
            cpack -G "TGZ;DEB"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            cpack -G "DragNDrop;ZIP"
          else
            cpack -G "WIX;ZIP"
          fi
          mkdir -p ../artifacts
          find . -maxdepth 1 -type f \( -name '*.tar.gz' -o -name '*.deb' -o -name '*.zip' -o -name '*.dmg' -o -name '*.msi' \) -exec mv {} ../artifacts/ \;

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ runner.os }}
          path: artifacts/*
          retention-days: 5

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-packages

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-packages/**/*
          generate_release_notes: true
