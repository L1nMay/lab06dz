name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zlib1g-dev

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake ninja -y --no-progress

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake pkg-config

      - name: Configure project
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: Build project
        run: cmake --build build --config Release --parallel 2

      - name: Run tests
        working-directory: ./build
        run: ctest --output-on-failure

      - name: Create packages
        run: |
          cd build
          if [ "$RUNNER_OS" == "Linux" ]; then
            cpack -G "TGZ;DEB"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            cpack -G "ZIP;DragNDrop"
          else
            cpack -G "ZIP;WIX"
          fi
          mkdir -p ../artifacts
          mv *.{tar.gz,deb,zip,dmg,msi} ../artifacts/ 2>/dev/null || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ runner.os }}
          path: artifacts/*
          retention-days: 7

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-packages

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-packages/**/*
          generate_release_notes: true
          draft: false
