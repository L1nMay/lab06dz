name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip
          cmake --version

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --formula cmake
          cmake --version

      # Установка зависимостей для Windows
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Альтернативная установка CMake без Chocolatey
          $cmakeInstalled = Get-Command cmake -ErrorAction SilentlyContinue
          if (-not $cmakeInstalled) {
            Invoke-WebRequest -Uri "https://github.com/Kitware/CMake/releases/download/v3.28.3/cmake-3.28.3-windows-x86_64.msi" -OutFile "cmake.msi"
            Start-Process msiexec -ArgumentList "/i cmake.msi /quiet /norestart" -Wait
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          }
          cmake --version

      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel 2

          # Создаем директорию для артефактов
          mkdir -p ../artifacts

          # Копируем результаты сборки (с правильными путями)
          case "$RUNNER_OS" in
            Linux|macOS)
              cp ./artifacts/solver ../artifacts/ || cp ./solver ../artifacts/
              ;;
            Windows)
              cp ./artifacts/solver.exe ../artifacts/ || cp ./solver.exe ../artifacts/
              ;;
          esac

      # Проверка результатов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts directory contents:"
          ls -lh artifacts/
          if [ ! -z "$(ls -A artifacts/)" ]; then
            echo "Artifacts found:"
            ls -lh artifacts/*
          else
            echo "No artifacts found!"
            exit 1
          fi

      # Создание исходников
      - name: Create source packages
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ github.ref_name }}-src.zip HEAD

      # Создание пакетов для Linux
      - name: Create Linux package
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cd artifacts
          tar czf Solver-${{ github.ref_name }}-Linux.tar.gz solver
          echo "Created package:"
          ls -lh *.tar.gz

      # Создание пакета для macOS
      - name: Create macOS package
        if: runner.os == 'macOS'
        shell: bash
        run: |
          cd artifacts
          tar czf Solver-${{ github.ref_name }}-macOS.tar.gz solver
          echo "Created package:"
          ls -lh *.tar.gz

      # Создание пакета для Windows
      - name: Create Windows package
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd artifacts
          Compress-Archive -Path solver.exe -DestinationPath "Solver-${{ github.ref_name }}-Windows.zip"
          echo "Created package:"
          dir

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7
