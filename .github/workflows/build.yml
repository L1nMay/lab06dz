name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Полная история для работы с тегами

      # Установка зависимостей для Linux
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          for i in {1..3}; do
            sudo apt-get update && sudo apt-get install -y cmake build-essential && break || echo "Attempt $i failed"
            sleep 5
          done

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          for i in {1..3}; do
            brew install --formula cmake && break || echo "Attempt $i failed"
            sleep 5
          done

      # Установка зависимостей для Windows
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (!(Get-Command -Name scoop -ErrorAction SilentlyContinue)) {
            iex "& {$(irm 'https://get.scoop.sh')}"
          }
          $retries = 3
          for ($i = 1; $i -le $retries; $i++) {
            try {
              scoop install cmake
              break
            } catch {
              Write-Host "Attempt $i failed: $_"
              Start-Sleep -Seconds 5
            }
          }

      # Создание директории сборки
      - name: Create build directory
        run: mkdir -p build
        shell: bash

      # Конфигурация CMake
      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      # Сборка проекта
      - name: Build
        run: cmake --build build --config Release

      # Просмотр артефактов сборки
      - name: List build artifacts
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd /c "dir /b build"
          else
            ls -l build
          fi

      # Создание пакетов для Linux/macOS
      - name: Create packages (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd build
          cpack -G "TGZ"
          mkdir -p ../artifacts
          find . -maxdepth 1 -type f \( -name '*.tar.gz' -o -name '*.zip' \) -exec mv {} ../artifacts/ \;

      # Создание пакетов для Windows
      - name: Create packages (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd build
          cpack -G ZIP
          if not exist ..\artifacts mkdir ..\artifacts
          move *.zip ..\artifacts\

      # Поиск файлов из тегов (Linux/macOS)
      - name: Find release files from tags (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if git describe --tags --abbrev=0 &>/dev/null; then
            TAG=$(git describe --tags --abbrev=0)
            echo "Found tag: $TAG"
            FILES=$(git ls-tree -r --name-only $TAG | grep -E '\.(tar\.gz|zip|deb|rpm|exe|msi)$' || echo "")
            echo "files=${FILES}" >> $GITHUB_OUTPUT
            echo "Found files: $FILES"
          else
            echo "No tags found"
            echo "files=" >> $GITHUB_OUTPUT
          fi

      # Поиск файлов из тегов (Windows)
      - name: Find release files from tags (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $tag = git describe --tags --abbrev=0 2>$null
          if ($tag) {
            Write-Host "Found tag: $tag"
            $files = git ls-tree -r --name-only $tag | Where-Object { $_ -match '\.(tar\.gz|zip|deb|rpm|exe|msi)$' }
            if (-not $files) { $files = "" }
            Write-Host "Found files: $files"
            echo "files=$files" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "No tags found"
            echo "files=" >> $env:GITHUB_OUTPUT
          }

      # Копирование файлов из тегов
      - name: Copy tag files to artifacts
        if: steps.find_tag_files_linux.outputs.files != '' || steps.find_tag_files_windows.outputs.files != ''
        shell: bash
        run: |
          mkdir -p artifacts/tag_files
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            files="${{ steps.find_tag_files_windows.outputs.files }}"
          else
            files="${{ steps.find_tag_files_linux.outputs.files }}"
          fi

          if [ -n "$files" ]; then
            TAG=$(git describe --tags --abbrev=0)
            for file in $files; do
              git show "$TAG:$file" > "artifacts/tag_files/$(basename "$file")"
            done
            echo "Copied tag files:"
            ls -l artifacts/tag_files
          fi

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ runner.os }}
          path: |
            artifacts/*
            artifacts/tag_files/*
          retention-days: 7
