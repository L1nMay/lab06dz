name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          for i in {1..3}; do
            sudo apt-get update && sudo apt-get install -y cmake build-essential && break || echo "Attempt $i failed"
            sleep 5
          done

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          for i in {1..3}; do
            brew install --formula cmake && break || echo "Attempt $i failed"
            sleep 5
          done

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (!(Get-Command -Name scoop -ErrorAction SilentlyContinue)) {
            iex "& {$(irm 'https://get.scoop.sh')}"
          }
          $retries = 3
          for ($i = 1; $i -le $retries; $i++) {
            try {
              scoop install cmake
              break
            } catch {
              Write-Host "Attempt $i failed: $_"
              Start-Sleep -Seconds 5
            }
          }

      - name: Create build directory
        run: mkdir -p build
        shell: bash

      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --config Release

      # Исправленный шаг (была ошибка на Windows)
      - name: List files in artifacts directory
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
            ls -l build/artifacts
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd /c "dir build\artifacts"
          fi

      - name: Create packages (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd build
          cpack -G "TGZ"
          mkdir -p ../artifacts
          find . -maxdepth 1 -type f \( -name '*.tar.gz' -o -name '*.zip' \) -exec mv {} ../artifacts/ \;

      - name: Create packages (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd build
          cpack -G ZIP
          if not exist ..\artifacts mkdir ..\artifacts
          move *.zip ..\artifacts\

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ runner.os }}
          path: artifacts/*
          retention-days: 7
