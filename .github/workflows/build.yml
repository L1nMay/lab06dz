name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip
          cmake --version

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --formula cmake
          cmake --version

      # Установка зависимостей для Windows
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Упрощенная установка Chocolatey
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          }
          choco install cmake -y --no-progress
          refreshenv
          cmake --version

      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel 2

          # Создаем директорию для артефактов
          mkdir -p ../artifacts

          # Копируем результаты сборки
          case "$RUNNER_OS" in
            Linux)
              cp solver ../artifacts/
              ;;
            macOS)
              cp solver ../artifacts/
              ;;
            Windows)
              cp solver.exe ../artifacts/
              ;;
          esac

      # Создание исходников
      - name: Create source packages
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ github.ref_name }}-src.zip HEAD

      # Создание пакетов для Linux
      - name: Create Linux package
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cd artifacts
          tar czf Solver-${{ github.ref_name }}-Linux.tar.gz solver
          echo "Created package:"
          ls -lh *.tar.gz

      # Создание пакета для macOS
      - name: Create macOS package
        if: runner.os == 'macOS'
        shell: bash
        run: |
          cd artifacts
          tar czf Solver-${{ github.ref_name }}-macOS.tar.gz solver
          echo "Created package:"
          ls -lh *.tar.gz

      # Создание пакета для Windows
      - name: Create Windows package
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd artifacts
          Compress-Archive -Path solver.exe -DestinationPath "Solver-${{ github.ref_name }}-Windows.zip"
          echo "Created package:"
          dir

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7
