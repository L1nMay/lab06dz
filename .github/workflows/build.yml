name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка зависимостей для Ubuntu
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential zip rpm
          cmake --version

      # Установка зависимостей для macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --formula cmake create-dmg
          cmake --version

      # Установка зависимостей для Windows
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Установка Chocolatey если нет
          if (-not (Test-Path "$env:ProgramData\chocolatey\choco.exe")) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

          # Установка cmake и zip
          choco install cmake zip wixtoolset -y --no-progress
          refreshenv
          cmake --version
          zip --version
          candle.exe -?

      # Сборка проекта
      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel 2

          # Создаем директорию для артефактов
          mkdir -p ../artifacts

          # Копируем результаты сборки
          case "$RUNNER_OS" in
            Linux)
              find . -executable -type f ! -name "*.so*" -exec cp {} ../artifacts/ \;
              ;;
            macOS)
              find . -perm +111 -type f ! -name "*.dylib" -exec cp {} ../artifacts/ \;
              ;;
            Windows)
              find . -type f \( -name "*.exe" -o -name "*.dll" \) -exec cp {} ../artifacts/ \;
              ;;
          esac

      # Проверка результатов
      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts directory contents:"
          ls -lh artifacts/
          if [ ! -z "$(ls -A artifacts/)" ]; then
            echo "Artifacts found:"
            ls -lh artifacts/*
          else
            echo "No artifacts found!"
            exit 1
          fi

      # Создание исходников
      - name: Create source packages
        shell: bash
        run: |
          mkdir -p artifacts/source
          git archive --format=tar.gz -o artifacts/source/Solver-${{ github.ref_name }}-src.tar.gz HEAD
          git archive --format=zip -o artifacts/source/Solver-${{ github.ref_name }}-src.zip HEAD

      # Создание бинарных пакетов для Linux
      - name: Create Linux packages
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cd build
          cpack -G "DEB;RPM;TGZ"
          mv *.deb *.rpm *.tar.gz ../artifacts/

      # Создание пакета для macOS
      - name: Create macOS package
        if: runner.os == 'macOS'
        shell: bash
        run: |
          mkdir -p pkg_root/usr/local/bin
          cp artifacts/solver pkg_root/usr/local/bin/
          create-dmg \
            --volname "Solver Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "solver.app" 200 190 \
            --hide-extension "solver.app" \
            --app-drop-link 600 185 \
            "artifacts/Solver-${{ github.ref_name }}-macOS.dmg" \
            "pkg_root/"

      # Создание пакетов для Windows
      - name: Create Windows packages
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd build
          cpack -G "ZIP;WIX"
          move *.zip *.msi ..\artifacts\

      # Загрузка артефактов
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Solver-${{ runner.os }}
          path: |
            artifacts/*
          retention-days: 7
