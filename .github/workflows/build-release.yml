name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            cpack_generators: "DEB;RPM;TGZ"
            artifact_name: linux-packages
          - os: macos-latest
            cpack_generators: "DragNDrop;ZIP"
            artifact_name: macos-packages
          - os: windows-latest
            cpack_generators: "WIX;ZIP"
            artifact_name: windows-packages

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update
          sudo apt-get install -y cmake rpm
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          choco install wixtoolset -y --no-progress
        fi

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build --config Release

    - name: Prepare package metadata
      run: |
        echo "CPACK_PACKAGE_CONTACT=maintainer@example.com" >> $GITHUB_ENV
        echo "CPACK_DEBIAN_PACKAGE_MAINTAINER=Maintainer Name <maintainer@example.com>" >> $GITHUB_ENV
        echo "CPACK_DEBIAN_PACKAGE_DEPENDS=libc6 (>= 2.14)" >> $GITHUB_ENV
        echo "CPACK_WIX_UPGRADE_GUID=59C3599E-9B55-493D-930C-43AAA0A67E7F" >> $GITHUB_ENV
        echo "CPACK_WIX_PRODUCT_GUID=89D3599E-9B55-493D-930C-43AAA0A67E8F" >> $GITHUB_ENV

    - name: Package
      run: |
        cd build
        cpack -G "${{ matrix.cpack_generators }}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          build/*.deb
          build/*.rpm
          build/*.tar.gz
          build/*.dmg
          build/*.zip
          build/*.msi

  create-release:
    needs: build-package
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref_name }}
        body: |
          Automated release for version ${{ github.ref_name }}
          Includes packages for:
          - Linux (.deb, .rpm, .tar.gz)
          - macOS (.dmg, .zip)
          - Windows (.msi, .zip)
        files: |
          artifacts/linux-packages/*
          artifacts/macos-packages/*
          artifacts/windows-packages/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
